---
title: "Network generation"
format: html
editor: source
author: Thomas Klebel
date-modified: today
date: today
bibliography: references.bib
fig-dpi: 300
---

# Rationale

We aim to assess network effects by embedding the teams in our simulation into
different kinds of networks. This is intended to reduce the number of
abstractions that the model entails, thus making the model slightly more
"realistic", in that actual researchers are of course embedded into a network of
social ties, and these ties have an effect on the researchers themselves.

The literature on co-authorship networks (see e.g., @newman2004, @newman2001,
@kumar2015) generally finds them to exhibit dynamics of both small-world
networks @watts1998 and scale-free networks @albert2002. In plain language,
co-authorship networks tend to comprise small groups of authors who collaborate
frequently, with a few highly connected authors, who tend to be well-known and
key figures in a community. Given that our model considers research *teams*,
rather than *individual researchers*, we did not attempt to calibrate our
networks against any given network, but rather to contrast networks with high
and low clustering. Previous research on co-authorships has reported moderate to
high clustering for fields such as Physics, IT, and Management studies
[@tang2017, @newman2001], and low clustering for fields such as Sociology
[@tang2017, @moody2004], Medicine [@tang2017], and the biomedical sciences more
broadly [@kumar2015]. Approaches to analysing co-authorships vary considerably,
and there is no reliable evidence on characteristics of co-authorship networks
in the humanities.

Our approach thus contrasts broad types of networks, rather than specific
networks of specific communities. As a baseline, we consider a random network.

# Package setup

```{r, message=FALSE, echo=FALSE}
library(tidyverse)
library(tidygraph)
library(ggraph)
library(igraph)
library(patchwork)

knitr::opts_chunk$set(echo = FALSE)

extrafont::loadfonts(device = "all")

source(here::here("R/functions.R"))

pretty_summary <- function(graph, summarise = TRUE) {
  if (summarise) {
    graph <- summarise_graph(graph)
  }
  graph %>%  
    rename("Number of Nodes" = n_nodes, "Average degree" = avg_degree,
           "Clustering coefficient" = clustering, "Average path distance" = mean_dist) %>% 
    knitr::kable()
}
```

# Baseline - random network

For the random network, we simulate a graph according to the Erdős--Rényi model
in the $G(n,p)$ variant, with $n = 100$ and $p = 0.06$. The value for $p$ was
chosen to be as low as possible while still obtaining a fully connected network.
@fig-random-graph shows the resulting network. Key summary statistics are
provided in @tbl-random.

```{r}
set.seed(20230617)
n <- 100
p <- .06
random_network <- play_erdos_renyi(n = n, p = p, directed = FALSE)
```

```{r random-graph-viz, warning=FALSE}
#| label: fig-random-graph
#| fig-cap: "Random network. Node size corresponds to the node's degree."
plot_graph(random_network, layout = "stress", groups = FALSE)
```

```{r}
#| label: tbl-random
#| tbl-cap: "Summary statistics for random network"
#| tbl-subcap: "We report the global clustering coefficient, that is, the number of closed triangles divided by all triangles in the network. This is not identical to the average local clustering coefficient."
pretty_summary(random_network)
```

```{r, warning=FALSE}
# we save the layout as well, so that VOSViewer can read the file
random_layout <- graphlayouts::layout_with_stress(random_network)

# save to file
random_network %>% 
  mutate(xcor = random_layout[, 1], # coordinates for netlogo
         ycor = random_layout[, 2],
         x = random_layout[, 1], # coordinates for VOSviewer
         y = random_layout[, 2],
         turtleid = 1:n) %>% # add an id column for the analysis
  write_graph("data/random_network.gml", format = "gml")
```

# Case 1: Low clustering

The first case of interest is a network with low clustering. The network is set
up to exhibit traits of both small-world and scale-free networks. We simulate
the network in four steps:

1.  We first generate multiple small-world networks that resemble clusters or
    communities within the field of interest. This step might create isolated
    nodes, due to the low neighbourhood size and the moderate rewiring
    probability.
2.  We add many edges to a few randomly picked nodes to create hubs. The edges
    are added by following the Barbasi-Albert algorithm, but without adding any
    further nodes:
    1.  Pick a random node $o$.
    2.  Pick a second node $k$ from all nodes (except the node chosen in step
        1), with probability $p(e)$, where
        $e = \frac{degree_k}{\sum_{i=1}^{k} degree_k}$
    3.  Add one edge from $o$ to $k$.
3.  Add further nodes and edges according to the Barbasi-Albert algorithm to
    ensure the size of of the main component is 100.
4.  We only retain the main component.

## Step 1: create fragmented communities

The fragmented communities are generated using the small-world algorithm
proposed by @watts1998. We obtain low clustering by using small neighbourhood
sizes (1-2), and a moderate rewiring probability (0.2-0.3).

```{r fragmented-initial, fig.height=4, fig.width=8}
set.seed(9872637)
fragmented_setup <- tibble(
  n_dim = rep(1, 5), # number of clusters
  dim_size = c(10, 25, 20, 25, 20), # n of clusters
  order = c(1, 2, 1, 2, 1), # neigborhood size
  p_rewire = c(.3, .2, .3, .2, .3) # rewire probability
)

fragmented_graphs <- pmap(fragmented_setup, play_smallworld)
fragmented <- bind_graphs(fragmented_graphs)

plot_graph(fragmented)
```

```{r}
pretty_summary(fragmented)
```

## Step 2: add hubs

```{r}
hubs <- rerun_addition(fragmented, times = 1, n_new_edges = 15)
hubs <- rerun_addition(hubs, times = 1, n_new_edges = 10)
```

```{r fragmented-hubs}
plot_graph(hubs, groups = TRUE)
```

```{r}
pretty_summary(hubs)
```

## Step 3: Add nodes and edges

```{r}
fragmented <- sample_pa(106, start.graph = hubs, out.pref = TRUE, 
                               m = 1, power = 1, directed = FALSE) %>% 
  as_tbl_graph()
```

```{r}
# the size of the main component is now 100
fragmented %>% 
  mutate(component_id = group_components()) %>% 
  as_tibble() %>% 
  count(component_id)
```

## Step 4: Retain main component

```{r}
final_fragmented <- fragmented %>% 
  mutate(component_id = group_components()) %>% 
  filter(component_id == 1) %>% 
  select(-component_id)
```

```{r fragmented-final}
plot_graph(final_fragmented, layout = "stress")
```

```{r}
pretty_summary(final_fragmented)
```

```{r fragmented-degree-dist}
plot_degree(final_fragmented)
```

```{r}
fragmented_layout <- graphlayouts::layout_with_stress(final_fragmented)

# save to file
final_fragmented %>% 
   mutate(xcor = fragmented_layout[, 1], # coordinates for netlogo
         ycor = fragmented_layout[, 2],
         x = fragmented_layout[, 1], # coordinates for VOSviewer
         y = fragmented_layout[, 2],
         turtleid = 1:n) %>% # add an id column for the analysis
  write_graph("data/fragmented_network.gml", format = "gml")
```

# Case 2: High clustering

Generating the network with high clustering follows the same rationale as the
one for low clustering. Since the settings in this case do not create isolated
nodes in step 1, the procedure can be slightly simplified:

1.  We first generate multiple small-world networks that resemble clusters or
    communities within the field of interest, with $n = 85$.
2.  We add many edges to a few randomly picked nodes to create hubs. The edges
    are added by following the Barbasi-Albert algorithm, but without adding any
    further nodes:
    1.  Pick a random node $o$.
    2.  Pick a second node $k$ from all nodes (except the node chosen in step
        1), with probability $p(e)$, where
        $e = \frac{degree_k}{\sum_{i=1}^{k} degree_k}$
    3.  Add one edge from $o$ to $k$.
3.  Add further nodes and edges according to the Barbasi-Albert algorithm to
    ensure a sample size of $n = 100$.

## Step 1: create clustered communities

Highly clustered communities are obtained by using a larger neighbourhood size
(3-6) for the clusters of 10-30 nodes, and setting a low rewire probability
(0.01-0.05).

```{r clustered-initial, fig.height=4, fig.width=8}
set.seed(8723234)
clustered_setup <- tibble(
  n_dim = rep(1, 6), # number of clusters
  dim_size = c(5, 10, 10, 15, 20, 30), # n of clusters
  order = c(2, 2, 3, 3, 4, 5), # neigborhood size
  p_rewire = c(.01, .01, .01, .03, .05, .01) # rewire probability
)

clustered_graphs <- pmap(clustered_setup, play_smallworld)
clustered <- bind_graphs(clustered_graphs)

plot_graph(clustered)
```

```{r}
pretty_summary(clustered)
```

## Step 2: add hubs

```{r}
hubs <- rerun_addition(clustered, times = 1, n_new_edges = 15)
hubs <- rerun_addition(hubs, times = 3, n_new_edges = 10)
```

```{r clustered-hubs}
plot_graph(hubs, groups = TRUE)
```

```{r}
pretty_summary(hubs)
```

## Step 3: Add nodes and edges

```{r}
final_clustered <- sample_pa(100, start.graph = hubs, out.pref = TRUE, 
                             m = 2, power = 1, directed = FALSE) %>% 
  as_tbl_graph()
```

```{r clustered-final}
plot_graph(final_clustered, layout = "lgl")
```

```{r}
pretty_summary(final_clustered)
```

```{r clustered-degree-dist}
plot_degree(final_clustered)
```

```{r}
clustered_layout <- graphlayouts::layout_with_stress(final_clustered)

# save to file
final_clustered %>% 
  mutate(xcor = clustered_layout[, 1], # coordinates for netlogo
         ycor = clustered_layout[, 2],
         x = clustered_layout[, 1], # coordinates for VOSviewer
         y = clustered_layout[, 2],
         turtleid = 1:n) %>% # add an id column for the analysis) 
  write_graph("data/clustered_network.gml", format = "gml")
```

# Summary of networks

@fig-network-overview provides an overview of all three generated networks.
Network (A) is clearly random, with no apparent clusters and relatively similar
degree across all nodes. In addition, the clustering coefficient is very low
(see @tbl-network-summary). This network serves as a baseline for our
simulation.

Network (B) exhibits equally low clustering, but high path length and low
degree. This resembles a community where most agents are not well connected, and
the distance to other agents is sometimes long. Nevertheless, the network
includes a few hubs which are much more connected than the other agents.

Network (C) is characterised by highly clustered communities, with high average
degree, high clustering, and relatively short average paths. Hubs are present
and connect the different communities, but are more similar to other nodes in
terms of their degree than in the case of network (B).

```{r, fig.height=5, fig.width=12, echo=FALSE, warning=FALSE}
#| label: fig-network-overview
#| fig-cap: "Overview of network topologies. (A) Random network. (B) Network with low clustering. (C) Network with high clustering. Colours represent groups optained via the Louvain algorithm. The size of nodes refers to their total degree."

p_random <- plot_graph(random_network, groups = FALSE)
p_fragemented <- plot_graph(final_fragmented, groups = FALSE)
p_clustered <- plot_graph(final_clustered, groups = FALSE)

p_random +
  p_fragemented +
  p_clustered +
  plot_layout(nrow = 1) +
  plot_annotation(tag_levels = "A", 
                  theme = theme_graph(base_family = "Arial")) 
```

```{r, echo=FALSE}
#| label: tbl-network-summary
#| tbl-cap: "Network properties of generated networks"

random_summary <- summarise_graph(random_network) %>% 
  mutate(Topology = "Random")
fragmented_summary <- summarise_graph(final_fragmented) %>% 
    mutate(Topology = "Low clustering")
clustered_summary <- summarise_graph(final_clustered) %>% 
    mutate(Topology = "High clustering")

bind_rows(random_summary, fragmented_summary, clustered_summary) %>% 
  select(Topology, everything()) %>% 
  pretty_summary(summarise = FALSE)

```

# References
